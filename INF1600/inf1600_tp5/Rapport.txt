Exercice 2 :

1. Comment est-il possible, sous Linux, que deux programmes exécutés en même temps et qui écrivent tous les deux à l'écran l'adresse à laquelle ils ont été chargés, affichent la même adresse?



2. Que se passe-t-il, en ordre, entre le moment où un logiciel déréférence un pointeur invalide et le moment où vous voyez une erreur de segmentation? On veut ici les étapes menant à cette erreur.

	Le logiciel demande à lire ou à écrire à l'adresse du pointeur. Il y a une tentative d'accès à la mémoire virtuelle pour cette adresse. La mémoire virtuelle possède un contrôle d'accès et gère l'accès au pointeur invalide comme une violation d'accès s'il accède à une mémoire où elle n'a pas permission d'accéder ou si elle accède à une mémoire inexistante. Il y a donc un throw de l'erreur de segmentation qui a lieu et le programme est terminé prématurément.

3. Si les registres d'un processeur sont tellement plus performants que les autres types de mémoire volatile, pourquoi ne pas en inclure des centaines, voire des milliers dans chaque processeur ? 

	C'est des mémoires de type SRAM. Elles ont donc un ratio coût/mémoire extrèmement dispendieuses vu un grand besoin de matériel pour les construire. De plus, elles perdent de l'efficacité en grand nombre.

4. Un ordinateur possède une mémoire principale constituée de 3 cadres de pages. Lorsqu'il n'y a pas assez de mémoire principale, le système d'exploitation récupère un cadre de page en utilisant l'algorithme de remplacement LRU. Combien de défauts de page se produit pour la séquence de demandes de pages : 1, 2, 3, 1, 4, 1, 3, 2, 5, 4 (sachant qu'au démarrage, aucune page n'est en mémoire principale) ?

	Il y en a 7 au total. 3 pour les trois premières demandes, une quatrième pour la première demande pour la page 4, une cinquième pour la deuxième demande pour la page 2 qui n'est plus en mémoire principale, une sixième pour la première demande de la page 5 et finalement, une septième pour la 2e demande de la page 4 qui n'est plus en mémoire principale.

5. Un système d'exploitation a-t-il accès aux adresses physiques de la mémoire (plutôt qu'avoir seulement accès aux adresses virtuelles comme les processus) ? Pourquoi ?



6. Nommez une situation où une politique de remplacement LRU d'une cache serait nécessairement plus efficace qu'une politique de remplacement aléatoire. Pourquoi ? 

	Dans le cas où le programme accède régulièrement à une nouvelle page, mais nécessite aussi par après l'information en mémoire de la page traitée précédente. Si le remplacement se fait aléatoirement, il se peut que la nouvelle page chargée écrase la page précédente, et il faut recharger la page précédente. En LRU ceci n'arriverait jamais, car la page traitée précédente sera gardée en mémoire et la nouvelle page prend la place de la page la plus anciennement traitée. 

7. Si une cache possède une capacité de 16 Ko et une longueur de ligne de 128 octets, combien d’ensembles le cache possède-t-il s’il est associatif par ensemble de 2, 4 ou 8 blocs ?

	Il possèderait respectivement 64, 32 et 16 ensembles.

8. Quels sont les avantages d'une cache Harvard par rapport à une cache unifiée ?



9. Sur un ordinateur contenant un processeur Intel Pentium III et 16 Gio de RAM installée, le système d'exploitation indique qu'il n'y a que 4 Gio de mémoire utilisable. Pourquoi ?

	Parce qu'un Pentium III n'est qu'un processeur 32 bit, il ne possède donc pas assez de bits pour traiter une plus grande allocation d'addresses mémoires principales. le nombre maximales d'adresses possibles avec 32 bits est 2^32 octets (4Gio).

10. Pourquoi le code suivant produit-il une erreur d'exécution ? 
#include <stdlib.h>
int main(void) {
	asm("pushf\norl $ 0x40000, (%esp) \ npopf \ n ");
	* ((int*) (((char*) malloc(5)) + 1)) = 23;
	return 0;
}

